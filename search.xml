<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python - decimal</title>
      <link href="/2021/03/21/Python-decimal/"/>
      <url>/2021/03/21/Python-decimal/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>前陣子，要把別人的 SQL 程式用 Python 重現<br>發現，有一部份的資料算出來的結果都有些微的誤差，人工驗算後才發現是浮點數 (floating-point) 的問題</p><h2 id="decimal"><a href="#decimal" class="headerlink" title="decimal"></a>decimal</h2><p>以下就是跟天真的我預想不一樣的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">3.15</span></span><br><span class="line">round(f, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 3.1</span></span><br></pre></td></tr></table></figure><p>如果精度 (precision) 很重要，請使用內建的 <code>decimal</code> 這個模組</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP </span><br><span class="line"><span class="comment"># 沒錯，rounding 規則也有很多種，要自己挑選</span></span><br><span class="line"><span class="comment"># 我自己是使用 ROUND_HALF_EVEN</span></span><br><span class="line"></span><br><span class="line">f = <span class="number">3.15</span></span><br><span class="line">Decimal(f)</span><br><span class="line"><span class="comment"># Decimal('3.149999999999999911182158029987476766109466552734375')</span></span><br><span class="line"></span><br><span class="line">Decimal(str(f)).quantize(Decimal(<span class="string">'.0'</span>), ROUND_HALF_EVEN)</span><br><span class="line"><span class="comment"># 3.2</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://kirin.idv.tw/python-decimal-module-tutorial/" target="_blank" rel="noopener">https://kirin.idv.tw/python-decimal-module-tutorial/</a></li><li><a href="https://docs.python.org/3/library/decimal.html" target="_blank" rel="noopener">https://docs.python.org/3/library/decimal.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker - Local Registry</title>
      <link href="/2020/08/05/Docker-Local-Registry/"/>
      <url>/2020/08/05/Docker-Local-Registry/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>上線環境常常連不到外網，更不用提去 Dockerhub 拉 image 來用。通常是在內網建個公司用的 registry server，一來是降低連線到外網的風險、二來是能檢驗公司內用的 image 是否合規。<br></br><br>這篇的目的在於，<strong>在本地建立個測試用的 registry server</strong> ，方便我自己測試 pull image 的過程是否有問題，畢竟公司的 registry server 也不是想測就測的。<br></br><br>然後，發現 docker doc 其實寫得很完整，所以節錄自己用到的部分，也記錄之後要去哪裡找資料。</p><h2 id="Deploy-a-local-registry-server"><a href="#Deploy-a-local-registry-server" class="headerlink" title="Deploy a local registry server"></a>Deploy a local registry server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure><h2 id="Copy-an-image-from-Docker-Hub-to-your-registry"><a href="#Copy-an-image-from-Docker-Hub-to-your-registry" class="headerlink" title="Copy an image from Docker Hub to your registry"></a>Copy an image from Docker Hub to your registry</h2><ol><li>Pull the ubuntu:16.04 image from Docker Hub <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure></li><li>Tag the image as <code>localhost:5000/my-ubuntu</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ubuntu:16.04 localhost:5000/my-ubuntu</span><br></pre></td></tr></table></figure></li><li>Push the image to the local registry running at <code>localhost:5000</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push localhost:5000/my-ubuntu</span><br></pre></td></tr></table></figure></li><li>Pull the localhost:5000/my-ubuntu image from your local registry <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull localhost:5000/my-ubuntu</span><br></pre></td></tr></table></figure></li></ol><h2 id="Stop-a-local-registry"><a href="#Stop-a-local-registry" class="headerlink" title="Stop a local registry"></a>Stop a local registry</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop registry</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop registry &amp;&amp; docker container rm -v registry</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.docker.com/registry/deploying/" target="_blank" rel="noopener">https://docs.docker.com/registry/deploying/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash - use getopts to parse arguments</title>
      <link href="/2020/08/05/Bash-getopts/"/>
      <url>/2020/08/05/Bash-getopts/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Python 有 <code>argparse</code> 可用，不曉得 Bash 是否有類似的模組能用?<br>結果是當然有 <code>&quot;getopts&quot;</code><br>事實上，之前也用過一兩次。這次特別把它記錄下來</p><h2 id="getopts"><a href="#getopts" class="headerlink" title="getopts"></a>getopts</h2><p>基本上用法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getopts optstring optname [ arg ]</span><br></pre></td></tr></table></figure><p>此篇僅記錄 short option ，若有 long-form (e.g. --path) 的需求，請參考<br><a href="https://www.shellscript.sh/tips/getopt/" target="_blank" rel="noopener">https://www.shellscript.sh/tips/getopt/</a><br>個人覺得相對複雜些，如果要寫得這麼完整，我可能就用 Python 改寫<br>或之後有工作需要，我搞清楚了再來補齊這篇文章</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=0; b=0; c=0; d=0;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":ab:c:dh"</span> opt;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Process <span class="variable">$opt</span> : OPTIND is <span class="variable">$OPTIND</span>"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$&#123;opt&#125;</span> <span class="keyword">in</span></span><br><span class="line">        a)</span><br><span class="line">            a=1 ;;</span><br><span class="line">        b)</span><br><span class="line">            b=<span class="variable">$OPTARG</span> ;;</span><br><span class="line">        c)</span><br><span class="line">            c=<span class="variable">$OPTARG</span> ;;</span><br><span class="line">        d)</span><br><span class="line">            d=1 ;;</span><br><span class="line">        h | ?)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'help message'</span>; <span class="built_in">exit</span> 0 ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a = <span class="variable">$a</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b = <span class="variable">$b</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"c = <span class="variable">$c</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"d = <span class="variable">$d</span>"</span></span><br></pre></td></tr></table></figure><p>說明一下上述範例內容</p><ul><li>有 5 個 options (a, b, c, d, h)<ul><li>其中 b, c 必須提供 argument。因 optstring 中的 b, c 後方有加入 <code>:</code> (e.g. <code>&quot;b:c:&quot;</code>)</li><li>其他 (a, d, h)，我的理解是類似 true/false 的概念</li></ul></li><li>不認得的 option ，會被當作 <code>?</code> 處理。範例中會顯示 help message</li><li>第 6 行 <code>echo &quot;Process $opt : OPTIND is $OPTIND&quot;</code> 的意思<ul><li>單純提供額外資訊 <code>$OPTIND</code>，不需要可以移除該行</li></ul></li></ul></br>以下為執行結果: <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh -a -b <span class="number">5566</span> -d -c <span class="number">56</span></span><br><span class="line">Process a : OPTIND is <span class="number">2</span></span><br><span class="line">Process b : OPTIND is <span class="number">4</span></span><br><span class="line">Process d : OPTIND is <span class="number">5</span></span><br><span class="line">Process c : OPTIND is <span class="number">7</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">5566</span></span><br><span class="line">c = <span class="number">56</span></span><br><span class="line">d = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh -b <span class="number">5566</span> -d -c <span class="number">56</span></span><br><span class="line">Process b : OPTIND is <span class="number">3</span></span><br><span class="line">Process d : OPTIND is <span class="number">4</span></span><br><span class="line">Process c : OPTIND is <span class="number">6</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">5566</span></span><br><span class="line">c = <span class="number">56</span></span><br><span class="line">d = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh -A</span><br><span class="line">Process ? : OPTIND is <span class="number">2</span></span><br><span class="line"><span class="built_in">help</span> message</span><br></pre></td></tr></table></figure><h3 id="optstring-前是否有"><a href="#optstring-前是否有" class="headerlink" title="optstring 前是否有 : ?"></a>optstring 前是否有 <code>:</code> ?</h3><p>這困擾我一陣子，網路上的範例有些有，有些無，搞不清楚最前面到底要不要加？<br>後來看到有人解釋:</p><ul><li>有 <code>:</code> 代表<strong>關閉</strong> default error handling</li><li>無 <code>:</code> 代表<strong>啟用</strong> default error handling<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># disable default error handling</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":ab:c:dh"</span> opt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable default error handling</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"ab:c:dh"</span> opt;</span><br></pre></td></tr></table></figure></li></ul><p>以下是有啟用 default error handling 的範例:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh -A</span><br><span class="line"><span class="function">test.sh: <span class="title">illegal</span> <span class="title">option</span> -- <span class="title">A</span></span></span><br><span class="line"><span class="function"><span class="title">Process</span> ? : <span class="title">OPTIND</span> <span class="title">is</span> 2</span></span><br><span class="line"><span class="function"><span class="title">help</span> <span class="title">message</span></span></span><br></pre></td></tr></table></figure><p>輸入不存在的 option <code>-A</code>，會顯示 <code>test.sh: illegal option -- A</code> 錯誤訊息<br>不需要這訊息的話，就可以選擇關閉 error handling</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options" target="_blank" rel="noopener">https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options</a></li><li><a href="https://www.shellscript.sh/tips/getopts/" target="_blank" rel="noopener">https://www.shellscript.sh/tips/getopts/</a></li><li><a href="https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/" target="_blank" rel="noopener">https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/</a></li><li><a href="https://www.computerhope.com/unix/bash/getopts.htm" target="_blank" rel="noopener">https://www.computerhope.com/unix/bash/getopts.htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Command Line Cheat Sheet</title>
      <link href="/2020/07/28/My-Command-Line-Cheat-Sheet/"/>
      <url>/2020/07/28/My-Command-Line-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><ul><li><p>create tar.gz</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zcvf tar-archive-name.tar.gz source-folder-name</span><br></pre></td></tr></table></figure></li><li><p>extract tar.gz</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf tar-archive-name.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>create tar.gz (pigz)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar cv filename | pigz -6 -p 10 -k &gt; filename.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>decompress</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -I pigz -xv filename.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ split -b 200M linux-mint-18.tar.gz &quot;ISO-archive.part&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat home.tar.bz2.parta* &gt; backup.tar.gz.joined</span><br></pre></td></tr></table></figure><h2 id="pcap"><a href="#pcap" class="headerlink" title="pcap"></a>pcap</h2><ul><li><p>check file type (pcap vs pcapng)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ capinfos -t [file]</span><br></pre></td></tr></table></figure></li><li><p>turn pcapng into pcap</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ editcap -F pcap &lt;input-pcapng-file&gt; &lt;output-pcap-file&gt;</span><br></pre></td></tr></table></figure></li><li><p>change packet’s timestamp (reduce 1 hour; 60x60)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ editcap -t -3600 input_dump output_dump</span><br></pre></td></tr></table></figure></li><li><p>install bittwist (centos: build from src code)</p></li><li><p>replace old ip (10.0.2.15) with new ip (1.144.118.53)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bittwiste -I input_dump -O output_dump -T ip -s 10.0.2.15,1.144.118.53 -d 10.0.2.15,1.144.118.53</span><br></pre></td></tr></table></figure></li><li><p>merge 2 pcap files (ctu20.pcap ctu29.pcap)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mergecap -w &lt;outfile&gt; [&lt;infile&gt; ...i]</span><br></pre></td></tr></table></figure></li><li><p>extract packets between a specific timeperiod </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ editcap -v -A &quot;1970-01-01 08:00:00&quot; -B &quot;1970-01-01 11:00:00&quot; input_dump output_dump</span><br></pre></td></tr></table></figure></li><li><p>split pcap file based on specific time inverval (second)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ editcap -i &lt;seconds&gt; &lt;input_file&gt; &lt;output_prefix&gt;.pcapng</span><br></pre></td></tr></table></figure></li><li><p>scapy</p><ul><li><a href="https://github.com/secdev/scapy" target="_blank" rel="noopener">https://github.com/secdev/scapy</a></li></ul></li><li><p>IP address display filter</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tshark -r &lt;pcap_file&gt; -T fields -e ip.addr -Y &quot;ip.addr &#x3D;&#x3D; 1.1.1.1&#x2F;24&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7zip"><a href="#7zip" class="headerlink" title="7zip"></a>7zip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 7za x ?</span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><ul><li>Search whether there are flows using  port 514  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;&quot;, \(514, [0-9]*\|[0-9]*, 514\)], &quot;byte&quot;&#39; *</span><br><span class="line">find .&#x2F;*&#x2F;* -type f -exec grep -l &#39;&quot;, \(514, [0-9]*\|[0-9]*, 514\)], &quot;byte&quot;&#39; &#123;&#125; +</span><br></pre></td></tr></table></figure></li><li>-v :invert -E: use regex  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -v -E &quot;(xuite|hamicloud|googleapis|hinet)&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><ul><li>split line by “\t”; print all columns (1 to NF)  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat [log] | awk -F &quot;\t&quot; &#39;&#123;for(i&#x3D;1;i&lt;NF;i++)&#123;printf &quot;%s&quot;, $i&#125; &#123;printf &quot;\n&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure></li><li>similar to the previous one  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat [log] | awk -F &quot;\t&quot; &#39;BEGIN&#123;OFS&#x3D;&quot;,&quot;&#125; &#123;printf &quot;%s |&quot;, $6; for(i&#x3D;10;i&lt;&#x3D;17;i++)&#123;printf &quot;%s,&quot;, $i&#125;; printf &quot;\n&quot;&#125;&#39;|sort|uniq</span><br></pre></td></tr></table></figure></li><li>print all columns except i==2 and i==3  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat [log] | awk -F &quot;\t&quot; &#39;&#123;for(i&#x3D;1;i&lt;&#x3D;NF;i++)&#123;if(i!&#x3D;2 &amp;&amp; i!&#x3D;3)&#123;printf &quot;%s&quot;, $i&#125;&#125; &#123;printf &quot;\n&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure></li><li>print line if column 4 or column 6 match the pattern  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat [log] | awk -F &quot;\t&quot; &quot;&#123;if (\$4 ~ &#x2F;$pattern&#x2F; || \$6 ~ &#x2F;$pattern&#x2F;) print&#125;&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><ul><li>print [file] starting from <code>3rd</code> line<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n+3 [file]</span><br></pre></td></tr></table></figure></li></ul><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><ul><li>print [file] except line <code>2</code> ~ line <code>5</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n &#39;2,5d;p&#39; [file]</span><br></pre></td></tr></table></figure></li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul><li><p>format(Indent) the whole file</p><ul><li>gg: from first line; G: to last line; =: Indent<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gg&#x3D;G</span><br></pre></td></tr></table></figure></li></ul></li><li><p>format(Indent) line 100 to line 200</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100G&#x3D;200G</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Examples of Docker Multi-stage Builds</title>
      <link href="/2020/07/18/Examples-of-Docker-Multi-stage-Builds/"/>
      <url>/2020/07/18/Examples-of-Docker-Multi-stage-Builds/</url>
      
        <content type="html"><![CDATA[<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>前陣子，在把專案製作成 docker image 的過程，想到幾個問題 :</p><ol><li>製作出的 image 理所當然要包含專案系統的功能。但是有需要包含 testing 的部分嗎 ?</li><li>不需要包含 testing 程式碼的話，要怎樣才能控制 docker build 的流程 ?</li><li>先不論程式碼，有辦法維護一個 Dockerfile 就同時符合 testing/production/… 多個需求嗎?</li></ol><p>搜尋相關資訊後，看起來解法就是 <strong>“docker multi-stage builds”</strong> (Docker 17.05 later)<br>以往同樣的程式要製作成不同用途 image (for testing, for production)，通常需要多個 Dockerfiles，透過 multi-stage builds 可以做到 :</p><ol><li>控制建構流程，達到一個 Dockerfile 可產生不同目的的 image <em>&leftarrow;我的主要需求</em></li><li>可以只複製某個 stage 的中間結果 &rightarrow; 不需要該 stage 的環境 &rightarrow; 節省 image 大小</li></ol><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>以下 2 個範例，內容差不多</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.12</span> AS base</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileInit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base AS testing</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileTesting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base AS production</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileProduct</span></span><br></pre></td></tr></table></figure><p>以上面這個 Dockerfile 而言，有 3 個 stages</p><ul><li><p>stage 0</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.12</span> AS base</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileInit</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>FROM [image] AS [name]</code></strong><ul><li><code>FROM</code> 搭配 <code>AS</code> 可以命名該 stage</li></ul></li><li>這裡把 <code>alpine:3.12</code> 命名為 <code>base</code></li><li>建立一個 fileInit 檔案</li></ul></li><li><p>stage 1</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> base AS testing</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileTesting</span></span><br></pre></td></tr></table></figure><ul><li>把 <code>base</code> 當作 parent image，並將此 stage 命名為 <code>testing</code></li><li>建立一個 fileTesting 檔案</li></ul></li><li><p>stage 2</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> base AS production</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileProduct</span></span><br></pre></td></tr></table></figure><ul><li><p>把 <code>base</code> 當作 parent image，並將此 stage 命名為 <code>production</code></p></li><li><p>建立一個 fileProduct 檔案</p></li><li><p>因為是把 <code>base</code> 當作 parent image，代表流程是 <code>base</code> &rightarrow; <code>production</code>，中間不包含 <code>testing</code>，代表製作的 image 不包含 <code>testing</code> 的資訊。  </p><p>  <strong>&rightarrow; “fileTesting 不存在”</strong></p></li></ul></li><li><p>Build image - EX1</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Production</span></span><br><span class="line">docker build -t multi1 --target production -f Dockerfile .</span><br><span class="line">docker build -t multi1 -f Dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line">docker build -t multi1 --target testing -f Dockerfile .</span><br></pre></td></tr></table></figure><ul><li>透過 <code>--target</code> 指定流程走到哪個 stage 結束</li><li>若 <code>--target production</code>，代表從頭 (<code>base</code>) 走到尾 (<code>production</code>)<ul><li>詳細去看 log 的話，<code>testing</code> 也會被執行，只是以 <a href="#Example-1">Example 1</a> 而言， image 不會包含 <code>testing</code> 的資訊</li></ul></li><li>若 <code>--target testing</code>，代表從 <code>base</code> 到 <code>testing</code></li><li>把 <code>touch file</code> 改成自己需要的指令 (python main.py | python -m pytest | … )，就能完成一個多目的的 Dockerfile :<ol><li>確保各用途的 image 都有一樣的環境</li><li>stage <code>testing</code> 才把測試用的程式碼與測試資料放到 image 中，產生 <code>production</code> image 時，就不會包含測試的資料與程式碼</li></ol></li></ul></li></ul><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p><a href="#example-1">Example 1</a> 透過 <code>--target</code> 控制流程，<a href="#example-2">Example 2</a> 則是透過 <code>--build-arg</code> 來達到目的。<br>個人認為 <a href="#example-2">Example 2</a> 較有彈性。專案可能越來越複雜，testing image跟 production image 不見得在最後才有差異。這種情況下，<code>--target</code> 不見得夠用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> BUILD_TYPE=<span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.12</span> AS base</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileInit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.14</span>.<span class="number">6</span> AS go-build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hello.go .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o hello .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base AS testing</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileTesting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base AS production</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileProduct</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> $&#123;BUILD_TYPE&#125; as after</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> after</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileFinal</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=go-build /go/hello .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"./hello"</span> ]</span></span><br></pre></td></tr></table></figure><ul><li><p>--build-arg</p><p>  <img src="/img/docker_multistage_build_ex2.png" alt="build flow"></p><p>  先不考慮 stage <code>go-build</code> 以及 <code>COPY</code> 指令的話<br>  就如前面所說，是透過 <code>--build-arg</code> (<code>BUILD_TYPE</code>) 來控制建構流程，順序如下</p><ol><li>base</li><li>testing | production       # 根據 BUILD_TYPE</li><li>after</li></ol></li></ul><ul><li><p>COPY (stage 1 &amp; stage 5)</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.14</span>.<span class="number">6</span> AS go-build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hello.go .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o hello .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> after</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> touch fileFinal</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=go-build /go/hello .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"./hello"</span> ]</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>COPY --from=[stage name] ...</code></strong><ul><li>從指定的 stage A 複製特定檔案到該 stage B</li></ul></li><li>(line: 8) 複製 stage <code>go-build</code> 產生的可執行檔 <code>hello</code> 到 stage <code>after</code> 中</li><li>stage <code>after</code> 需要執行 <code>hello</code>，因此對使用者而言，stage <code>go-build</code> 唯一需要保留的就是<code>hello</code>。透過 multi-stage build，最終產生的 image 不會包含 stage <code>go-build</code> 的 go 環境<ul><li>減少 image 大小</li></ul></li></ul></li><li><p>Build image - EX2</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Production</span></span><br><span class="line">docker build -t multi2 --build-arg BUILD_TYPE=production -f Dockerfile .</span><br><span class="line">docker build -t multi2 -f Dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line">docker build -t multi2 --build-arg BUILD_TYPE=testing -f Dockerfile .</span><br></pre></td></tr></table></figure><ul><li>類似 <a href="#build-image---ex1">Build image - EX1</a>，只是改由 <code>--build-arg</code> 來指定流程</li></ul></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>基本上，知道下面兩個指令的作用</p><ol><li><code>FROM [image] AS [name]</code> </li><li><code>COPY --from=[stage name] ...</code></li></ol><p>搭配 docker build 的兩個參數</p><ol><li><code>--target</code></li><li><code>--build-arg</code></li></ol><p>就能看懂用 multi-stage 的 Dockerfile，<br>剩下就是從簡單的範例改出自己需要的 Dockerfile ~</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noopener">https://docs.docker.com/develop/develop-images/multistage-build/</a></li><li><a href="https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/" target="_blank" rel="noopener">https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/</a></li><li><a href="https://kkc.github.io/2018/04/28/docker-note/" target="_blank" rel="noopener">https://kkc.github.io/2018/04/28/docker-note/</a></li><li><a href="https://jiepeng.me/2018/06/09/use-docker-multiple-stage-builds" target="_blank" rel="noopener">https://jiepeng.me/2018/06/09/use-docker-multiple-stage-builds</a></li><li><a href="https://tachingchen.com/tw/blog/docker-multi-stage-builds/" target="_blank" rel="noopener">https://tachingchen.com/tw/blog/docker-multi-stage-builds/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker commands</title>
      <link href="/2020/07/15/Docker-commands/"/>
      <url>/2020/07/15/Docker-commands/</url>
      
        <content type="html"><![CDATA[<h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm -v $(pwd):&#x2F;app:rw [image-name] [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">-i : Keep STDIN open even if not attached</span><br><span class="line">-t : Allocate a pseudo-tty</span><br><span class="line">-v : Bind mount a volume.</span><br><span class="line">    --volume&#x3D;[host-src:]container-dest[:&lt;options&gt;]</span><br><span class="line">--rm : automatically clean up the container and remove the file system when the container exits</span><br></pre></td></tr></table></figure><ul><li>ref: <a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener">Docker run reference</a></li></ul><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>start the stopped container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start [container-name]</span><br></pre></td></tr></table></figure><h2 id="Save-and-Load-image"><a href="#Save-and-Load-image" class="headerlink" title="Save and Load image"></a>Save and Load image</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save as .tar</span></span><br><span class="line">$ docker save [image-name] &gt; [image-name.tar]</span><br><span class="line"></span><br><span class="line"><span class="comment"># load</span></span><br><span class="line">$ docker load &lt; [image-name.tar]</span><br></pre></td></tr></table></figure><h2 id="Image-List-Del"><a href="#Image-List-Del" class="headerlink" title="Image (List / Del)"></a>Image (List / Del)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line">$ docker images </span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># delete</span></span><br><span class="line">$ docker image rm [image-name]</span><br></pre></td></tr></table></figure><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list all running containers</span></span><br><span class="line">$ docker container ls</span><br><span class="line">$ docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all containers including exited</span></span><br><span class="line">$ docker container ls -a</span><br><span class="line">$ docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all running containers with Container ID</span></span><br><span class="line">$ docker ps -q</span><br></pre></td></tr></table></figure><h3 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stop a running container</span></span><br><span class="line">$ docker stop [container-name]</span><br><span class="line">$ docker stop [container-id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop all running container</span></span><br><span class="line">$ docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure><h3 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># remove stopped container</span></span><br><span class="line">$ docker container rm [container-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove all stopped containers</span></span><br><span class="line">$ docker container rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><p>commit to image<br>“src image” &rightarrow; “changed container” &rightarrow; “new image”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit [container-id] [image-name]</span><br></pre></td></tr></table></figure><ul><li>ref: <a href="https://tuhrig.de/difference-between-save-and-export-in-docker/" target="_blank" rel="noopener">Difference between save and export in Docker</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Environment Setup (Docker + Tensorflow + Mxnet + GPU)</title>
      <link href="/2020/06/12/Docker-x-Tensorflow-x-Mxnet-x-GPU/"/>
      <url>/2020/06/12/Docker-x-Tensorflow-x-Mxnet-x-GPU/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先前的經驗告訴我，建個 GPU 訓練環境是很麻煩的事  </p><p>最近想學習一下 Computer Vision，是時候再來弄個環境<br>原先在猜，如果用 container 的方式來做說不定會比較簡單，也容易搬到別的地方部屬  </p><p>結果，還是有不少眉眉角角的地方要注意<br>目前看來，應該有比較好 deploy 吧？</p><h2 id="Pre-installation"><a href="#Pre-installation" class="headerlink" title="Pre-installation"></a>Pre-installation</h2><p>簡單說明安裝前的環境</p><ul><li>Ubuntu 18.04 LTS</li><li>Docker version 19.03.11</li><li>GPU (1070ti)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接下來，文章中會用 Host 代表所謂的 Localhost (本機)， Guest 代表 Container</span><br><span class="line">我不確定這用法是否合適，若有更好的說法，請再指教 :)</span><br></pre></td></tr></table></figure><p>可以看到，Host 還沒有裝 <code>nvidia-driver</code> 跟 <code>CUDA</code><br>實際上，Host 不用刻意去裝 CUDA。之後直接 pull 別人處理好的 image 就行。<br>除非，你想在 Host 也有個可以使用 GPU training 的環境。</p><p><code>Docker</code>的部份請參考 <a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/ubuntu/</a><br>除非像敝司的網路環境，什麼都要設定 Proxy，不然這官網這一頁就很夠了</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Nvidia-Driver"><a href="#Nvidia-Driver" class="headerlink" title="Nvidia Driver"></a>Nvidia Driver</h3><ol><li>先檢查是否有 <code>ubuntu-drivers-common</code> 這個工具 (我的環境是已安裝)<br> 沒有的話，請先安裝</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers&#x2F;ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ubuntu-drivers-common</span><br></pre></td></tr></table></figure><ol start="2"><li>用 <code>ubuntu-drivers-common</code> 檢查 Driver 狀態</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D; &#x2F;sys&#x2F;devices&#x2F;pci0000:00&#x2F;0000:00:03.1&#x2F;0000:1c:00.0 &#x3D;&#x3D;</span><br><span class="line">modalias : pci:v000010DEd00001B82sv000019DAsd00002445bc03sc00i00</span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">model    : GP104 [GeForce GTX 1070 Ti]</span><br><span class="line">driver   : nvidia-driver-415 - third-party free</span><br><span class="line">driver   : nvidia-driver-418 - third-party free</span><br><span class="line">driver   : nvidia-driver-390 - distro non-free</span><br><span class="line">driver   : nvidia-driver-440 - third-party free recommended</span><br><span class="line">driver   : nvidia-driver-435 - distro non-free</span><br><span class="line">driver   : nvidia-driver-410 - third-party free</span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free builtin</span><br></pre></td></tr></table></figure><pre><code>實際上，以現在時間(2020-06-12)最新的版本是 `nvidia-driver-450`  但是根據清單，我選擇清單中出現的 `nvidia-driver-440`裝完後，重新開機</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="Nvidia-Container-Runtime"><a href="#Nvidia-Container-Runtime" class="headerlink" title="Nvidia Container Runtime"></a>Nvidia Container Runtime</h3><ol start="3"><li>接著安裝 <code>nvidia-container-runtime</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-container-runtime</span><br></pre></td></tr></table></figure><h3 id="Build-Docker-Image"><a href="#Build-Docker-Image" class="headerlink" title="Build Docker Image"></a>Build Docker Image</h3><ol start="4"><li><p>以下是我的 Dockerfile (也可以 pull 後再修改)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM tensorflow&#x2F;tensorflow:latest-gpu-py3</span><br><span class="line"></span><br><span class="line">ENV LC_ALL C.UTF-8</span><br><span class="line">ENV LANG C.UTF-8</span><br><span class="line">ENV LANGUAGE C.UTF-8</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y libsm6 libxext6 libxrender-dev </span><br><span class="line"></span><br><span class="line">RUN useradd --create-home --shell &#x2F;bin&#x2F;bash user</span><br><span class="line">WORKDIR &#x2F;home&#x2F;user</span><br><span class="line"></span><br><span class="line">RUN python3 -m pip install -U pip setuptools</span><br><span class="line">RUN python3 -m pip install jupyterlab gluoncv opencv-python pandas numpy ensemble-boxes</span><br><span class="line">RUN python3 -m pip install mxnet-cu101</span><br></pre></td></tr></table></figure><p> <strong>注意 base image (tensorflow/tensorflow:latest-gpu-py3) 中的 <code>CUDA</code> 版本</strong><br> 檢查 (tensorflow, CUDA) &amp; (mxnet, CUDA) 版本對應是否正確  </p><p> 原則上，從 tensorflow 抓的 image， tensorflow 跟 CUDA 的版本是沒有問題的<br> 但我還想使用 mxnet， 所以要去確認 image 的 CUDA 版本  </p><p> run container，到 <code>/usr/local</code> 確認 CUDA 版本<br> 我這裡是 cuda-10-1，所以安裝 mxnet-cu101  </p><p> p.s. 不曉得為什麼，在 container 用 <code>nvidia-smi</code> 測試，顯示是 10.2</p></li><li><p>在 Dockerfile 同一個資料夾下 build image</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;IMAGE NAME&gt; .</span><br></pre></td></tr></table></figure><h3 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h3><ol start="6"><li><p>借 tensorflow 跟 mxnet 官方文件的指令來測試，GPU環境是否一切安好</p><ul><li><p>tensorflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --gpus all -it --rm &lt;IMAGE NAME&gt; \</span><br><span class="line">python -c &quot;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></pre></td></tr></table></figure></li><li><p>mxnet</p><ul><li>Launch the container</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --gpus all -it --rm &lt;IMAGE NAME&gt; bash</span><br></pre></td></tr></table></figure><ul><li>Start the python terminal and test it</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = mx.nd.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.asnumpy()</span><br><span class="line">array([[ <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>],</span><br><span class="line">        [ <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p>沒有 error，就沒事啦</p></li></ul></li></ol><h3 id="Launch-with-jupyter-lab"><a href="#Launch-with-jupyter-lab" class="headerlink" title="Launch with jupyter lab"></a>Launch with jupyter lab</h3><ol start="7"><li>enjoy</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --gpus all -p 8888:8888 -u user:user -v $(pwd):&#x2F;home&#x2F;user &lt;IMAGE NAME&gt; \</span><br><span class="line">jupyter lab --ip&#x3D;0.0.0.0 --port&#x3D;8888 --notebook-dir&#x3D;&#x2F;home&#x2F;user</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.celantur.com/blog/run-cuda-in-docker-on-linux/" target="_blank" rel="noopener">https://www.celantur.com/blog/run-cuda-in-docker-on-linux/</a></li><li><a href="https://www.tensorflow.org/install/docker#examples_using_gpu-enabled_images" target="_blank" rel="noopener">https://www.tensorflow.org/install/docker#examples_using_gpu-enabled_images</a></li><li><a href="https://gitpress.io/@chchang/install-nvidia-driver-cuda-pgstrom-in-ubuntu-1804" target="_blank" rel="noopener">https://gitpress.io/@chchang/install-nvidia-driver-cuda-pgstrom-in-ubuntu-1804</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TechMemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> tensorflow </tag>
            
            <tag> mxnet </tag>
            
            <tag> GPU </tag>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/30/hello-world/"/>
      <url>/2020/05/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
