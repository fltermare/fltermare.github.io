<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>docker - Tag - FLTERMARE&#39;s NOTE</title>
        <link>https://fltermare.github.io/tags/docker/</link>
        <description>docker - Tag - FLTERMARE&#39;s NOTE</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Aug 2020 21:30:56 &#43;0000</lastBuildDate><atom:link href="https://fltermare.github.io/tags/docker/" rel="self" type="application/rss+xml" /><item>
    <title>Docker - Local Registry</title>
    <link>https://fltermare.github.io/docker-local-registry/</link>
    <pubDate>Wed, 05 Aug 2020 21:30:56 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://fltermare.github.io/docker-local-registry/</guid>
    <description><![CDATA[Intro 上線環境常常連不到外網，更不用提去 Dockerhub 拉 image 來用。通常是在內網建個公司用的 registry server，一來是降低連線到外網的風險、二來是能檢驗公司內用的 image 是否合規。 
這篇的目的在於，在本地建立個測試用的 registry server ，方便我自己測試 pull image 的過程是否有問題，畢竟公司的 registry server 也不是想測就測的。 
然後，發現 docker doc 其實寫得很完整，所以節錄自己用到的部分，也記錄之後要去哪裡找資料。
Deploy a local registry server 1  docker run -d -p 5000:5000 --restart=always --name registry registry:2   Copy an image from Docker Hub to your registry  Pull the ubuntu:16.04 image from Docker Hub 1  docker pull ubuntu:16.04    Tag the image as localhost:5000/my-ubuntu 1  docker tag ubuntu:16.]]></description>
</item><item>
    <title>Examples of Docker Multi-stage Builds</title>
    <link>https://fltermare.github.io/examples-of-docker-multi-stage-builds/</link>
    <pubDate>Sat, 18 Jul 2020 15:44:07 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://fltermare.github.io/examples-of-docker-multi-stage-builds/</guid>
    <description><![CDATA[Purpose 前陣子，在把專案製作成 docker image 的過程，想到幾個問題 :
 製作出的 image 理所當然要包含專案系統的功能。但是有需要包含 testing 的部分嗎 ? 不需要包含 testing 程式碼的話，要怎樣才能控制 docker build 的流程 ? 先不論程式碼，有辦法維護一個 Dockerfile 就同時符合 testing/production/&hellip; 多個需求嗎?  搜尋相關資訊後，看起來解法就是 &ldquo;docker multi-stage builds&rdquo; (Docker 17.05 later)
以往同樣的程式要製作成不同用途 image (for testing, for production)，通常需要多個 Dockerfiles，透過 multi-stage builds 可以做到 :
 控制建構流程，達到一個 Dockerfile 可產生不同目的的 image ←我的主要需求 可以只複製某個 stage 的中間結果 → 不需要該 stage 的環境 → 節省 image 大小  Examples 以下 2 個範例，內容差不多
Example 1 1 2 3 4 5 6 7 8 9  FROMalpine:3.]]></description>
</item><item>
    <title>Docker commands</title>
    <link>https://fltermare.github.io/docker-commands/</link>
    <pubDate>Wed, 15 Jul 2020 17:51:50 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://fltermare.github.io/docker-commands/</guid>
    <description><![CDATA[Run 1 2 3 4 5 6 7  $ docker run -it --rm -v $(pwd):/app:rw [image-name] [COMMAND] [ARG...] -i : Keep STDIN open even if not attached -t : Allocate a pseudo-tty -v : Bind mount a volume. --volume=[host-src:]container-dest[:&lt;options&gt;] --rm : automatically clean up the container and remove the file system when the container exits    ref: Docker run reference  Start start the stopped container
1  $ docker start [container-name]   Save and Load image 1 2 3 4 5  # save as .]]></description>
</item><item>
    <title>Environment Setup (Docker &#43; Tensorflow &#43; Mxnet &#43; GPU)</title>
    <link>https://fltermare.github.io/docker-x-tensorflow-x-mxnet-x-gpu/</link>
    <pubDate>Fri, 12 Jun 2020 22:16:22 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://fltermare.github.io/docker-x-tensorflow-x-mxnet-x-gpu/</guid>
    <description><![CDATA[前言 先前的經驗告訴我，建個 GPU 訓練環境是很麻煩的事
最近想學習一下 Computer Vision，是時候再來弄個環境
原先在猜，如果用 container 的方式來做說不定會比較簡單，也容易搬到別的地方部屬
結果，還是有不少眉眉角角的地方要注意
目前看來，應該有比較好 deploy 吧？
Pre-installation 簡單說明安裝前的環境
 Ubuntu 18.04 LTS Docker version 19.03.11 GPU (1070ti)  1 2  接下來，文章中會用 Host 代表所謂的 Localhost (本機)， Guest 代表 Container 我不確定這用法是否合適，若有更好的說法，請再指教 :)   可以看到，Host 還沒有裝 nvidia-driver 跟 CUDA
實際上，Host 不用刻意去裝 CUDA。之後直接 pull 別人處理好的 image 就行。
除非，你想在 Host 也有個可以使用 GPU training 的環境。
Docker的部份請參考 https://docs.docker.com/engine/install/ubuntu/
除非像敝司的網路環境，什麼都要設定 Proxy，不然這官網這一頁就很夠了
Installation Nvidia Driver  先檢查是否有 ubuntu-drivers-common 這個工具 (我的環境是已安裝)]]></description>
</item></channel>
</rss>
