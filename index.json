[{"categories":["TechMemo"],"content":"Introduction 紀錄一下， decorator 怎麼用 個人比較常使用到的情境是紀錄各個步驟(function)使用的時間 (e.g. pre-processing / training / inference …) 個人的感想是 如果不用 args 就選 function without args 如果需要 args 就選 class with args full sample code: https://gist.github.com/fltermare/32af9e5abf6bb0cd6e230ee755ee2f60 ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:1:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"function without args def decorator_func_without_args(func): @wraps(func) def wrapper(*args, **kargs): start_time = time.time() print(\"{} [{}] start\".format(start_time, func.__name__)) res = func(*args, **kargs) end_time = time.time() print(\"{} [{}] end, cost: {}\".format(end_time, func.__name__, end_time - start_time)) print(\"[{}] doc: '{}'\".format(func.__name__, func.__doc__)) return res return wrapper @decorator_func_without_args def dummy_func_a(msg): \"\"\"doc aaaaaaa\"\"\" time.sleep(1) return \"msg: {}\\n\".format(msg) print(dummy_func_a(\"args - dummy_func_a\")) 1622875328.5369604 [dummy_func_a] start 1622875329.5382118 [dummy_func_a] end, cost: 1.001251459121704 [dummy_func_a] doc: 'doc aaaaaaa' msg: args - dummy_func_a ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:2:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"function with args def decorator_func_with_args(decorator_args): def outer_wraper(func): @wraps(func) def wrapper(*args, **kargs): start_time = time.time() print(\"{} [{}] start\".format(start_time, func.__name__)) ##### print(\"[!] {}\".format(decorator_args)) ##### res = func(*args, **kargs) end_time = time.time() print(\"{} [{}] end, cost: {}\".format(end_time, func.__name__, end_time - start_time)) print(\"[{}] doc: '{}'\".format(func.__name__, func.__doc__)) return res return wrapper return outer_wraper @decorator_func_with_args(\"args for decorator_func_with_args\") def dummy_func_b(msg): \"\"\"doc bbbbbbb\"\"\" time.sleep(1) return \"msg: {}\\n\".format(msg) print(dummy_func_b(\"args - dummy_func_b\")) 1622875329.538264 [dummy_func_b] start [!] args for decorator_func_with_args 1622875330.539237 [dummy_func_b] end, cost: 1.0009729862213135 [dummy_func_b] doc: 'doc bbbbbbb' msg: args - dummy_func_b ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:3:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"class without args class DecoratorWithoutArgs: def __init__(self, func): self.func = func def __call__(self, *args, **kargs): start_time = time.time() print(\"{} [{}] start\".format(start_time, self.func.__name__)) res = self.func(*args, **kargs) end_time = time.time() print(\"{} [{}] end, cost: {}\".format(end_time, self.func.__name__, end_time - start_time)) print(\"[{}] doc: '{}'\".format(self.func.__name__, self.func.__doc__)) return res @DecoratorWithoutArgs def dummy_func_c(msg): \"\"\"doc ccccccc\"\"\" time.sleep(1) return \"msg: {}\\n\".format(msg) print(dummy_func_c(\"args - dummy_func_c\")) 1622875330.5393002 [dummy_func_c] start 1622875331.540669 [dummy_func_c] end, cost: 1.001368761062622 [dummy_func_c] doc: 'doc ccccccc' msg: args - dummy_func_c ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:4:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"class with args class DecoratorWithArgs: def __init__(self, decorator_args): self.decorator_args = decorator_args def __call__(self, func): def wrapper(*args, **kargs): start_time = time.time() print(\"{} [{}] start\".format(start_time, func.__name__)) ##### print(\"[!] {}\".format(self.decorator_args)) ##### res = func(*args, **kargs) end_time = time.time() print(\"{} [{}] end, cost: {}\".format(end_time, func.__name__, end_time - start_time)) print(\"[{}] doc: '{}'\".format(func.__name__, func.__doc__)) return res return wrapper @DecoratorWithArgs(\"args for decorator_func_with_args\") def dummy_func_d(msg): \"\"\"doc ddddddd\"\"\" time.sleep(1) return \"msg: {}\\n\".format(msg) print(dummy_func_d(\"args - dummy_func_d\")) 1622875331.5407255 [dummy_func_d] start [!] args for decorator_func_with_args 1622875332.5420897 [dummy_func_d] end, cost: 1.0013642311096191 [dummy_func_d] doc: 'doc ddddddd' msg: args - dummy_func_d ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:5:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"inside class class DummyClass: def __init__(self): self.para = \"para in init\" def decorator_func_inclass(func): @wraps(func) def wrapper(*args, **kargs): start_time = time.time() print(\"{} [{}] start\".format(start_time, func.__name__)) ##### self = args[0] print(\"[!] {}\".format(self.para)) ##### res = func(*args, **kargs) end_time = time.time() print(\"{} [{}] end, cost: {}\".format(end_time, func.__name__, end_time - start_time)) print(\"[{}] doc: '{}'\".format(func.__name__, func.__doc__)) return res return wrapper @decorator_func_inclass def dummy_func_e(self, msg): \"\"\"doc eeeeeee\"\"\" time.sleep(1) return \"msg: {}\\n\".format(msg) obj = DummyClass() print(obj.dummy_func_e(\"args - dummy_func_e\")) 1622875332.5421455 [dummy_func_e] start [!] para in init 1622875333.5435815 [dummy_func_e] end, cost: 1.0014359951019287 [dummy_func_e] doc: 'doc eeeeeee' msg: args - dummy_func_e 這個例子比較特別，因為某些原因我想在 decorator function 中使用 object 的 attribute 因此需要能使用到 self，後來找到這個作法 (ref 的第二個 URL) 不確定是否正確，有錯請指正 ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:6:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"Ref Python Decorator 入門教學 https://stackoverflow.com/questions/1263451/python-decorators-in-classes ","date":"2021-06-05","objectID":"/2021/06/python-decorator/:7:0","tags":["Python","decorator"],"title":"Python - decorator","uri":"/2021/06/python-decorator/"},{"categories":["TechMemo"],"content":"Introduction 以往需要用到 multi-processing 時大多都是使用 concurrent.futures 來處理 最近有機會使用到其他的 Library，把常見的幾種方式紀錄下來 ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:1:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"Task 常見的模式，有個需要重複 N 次的 task， task 內的邏輯都一樣，唯一的差異在於輸入的參數，task 執行時也不相依於其他 task example： Input： 長度 100 的 list 使用 10 個 workers， task 處理的部份 Output： 預期同樣是長度 100 的 list; 順序可能會變 ┌───────────┐ ┌───────────┐ ─┐ │ input 1 │ ┌───────────┐ │ output 3 │ │ ├───────────┤ │ worker 1 │ ├───────────┤ │ │ input 2 │ └───────────┘ │ output 1 │ │ ├───────────┤ ├───────────┤ │ │ input 3 │ │ output 4 │ │ ├───────────┤ ┌───────────┐ ├───────────┤ │ │ input 4 │ │ worker 2 │ │ output 2 │ │ 100 ├───────────┤ ──────────► └───────────┘ ─────────►├───────────┤ │ │ input 5 │ . │ output 10 │ │ ├───────────┤ . ├───────────┤ │ │ . │ . │ . │ │ │ . │ ┌───────────┐ │ . │ │ │ . │ │ worker 10 │ │ . │ │ ├───────────┤ └───────────┘ ├───────────┤ │ │ input 100 │ │ output ? │ │ └───────────┘ └───────────┘ ─┘ sample code: https://gist.github.com/fltermare/d277f6d85d8e0bc09fb792fd3e87d19e ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:1:1","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"Preliminary work from multiprocessing import Process, Queue, Pool from concurrent import futures from functools import wraps import time import datetime class ProcTarget(): @classmethod def proc1(cls, idx, input_q, output_q): print(\"Child process #{} started\".format(idx)) while True: while input_q.empty(): time.sleep(0.1) i = input_q.get(True) if i is None: print(\"Child process #{} ending\".format(idx)) return res = cls.proc2(i, i) output_q.put(res, True) @classmethod def proc2(cls, i1, i2): time.sleep(5) return i1 * i2 def timer(func): @wraps(func) def wrap(*args, **kwargs): time_start = datetime.datetime.now() x = func(*args, **kwargs) time_end = datetime.datetime.now() print(\"[{}] cost time: {}\".format(func.__name__, time_end - time_start)) print(\"[{}] return len: {}\".format(func.__name__, len(x))) return x return wrap ProcTarget(): worker 要執行的 function 邏輯：是先睡 5 秒，再把 input 相乘並回傳 ProcTarget.func1： For multiprocessing.Process， 須自行處理取出 input 與回傳 output ProcTarget.func2： For multiprocessing.Pool \u0026 concurrent.futures timer()： python decorator; 計時用 ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:2:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"multiprocessing.Process @timer def use_process_queue(inputs, num_proc): res = [] qsize = 100 input_q = Queue(maxsize=qsize) output_q = Queue(maxsize=qsize) # create and start child processes proc_queue = [] for i in range(num_proc): proc = Process(target=ProcTarget.proc1, args=(i, input_q, output_q)) proc.start() proc_queue.append(proc) # put input into input_q; get output and the same time for i in inputs: while True: while True: try: out = output_q.get(False) res.append(out) except Exception: break if not input_q.full(): input_q.put(i, True) break # put stop sign (None) into input_q; to terminate child process for i in range(num_proc): input_q.put(None, True) # get remaining output while True: try: out = output_q.get(timeout=30) res.append(out) except Exception: break # make sure all child processes have stopped for proc in proc_queue: proc.join() return res 需要自行管理 input queue \u0026 output queue put data into input queue \u0026 get the result from output queue child processes lifecycle ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:3:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"multiprocessing.Pool @timer def use_mp_pool_sync(inputs, num_proc): with Pool(num_proc) as pool: res = pool.starmap(ProcTarget.proc2, [(i, i) for i in inputs]) return res @timer def use_mp_pool_async(inputs, num_proc): with Pool(num_proc) as pool: tmp = pool.starmap_async(ProcTarget.proc2, [(i, i) for i in inputs]) res = tmp.get() return res ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:4:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"concurrent.futures @timer def use_future_process(inputs, num_proc): res = [] with futures.ProcessPoolExecutor(max_workers=num_proc) as executor: fs = [] for i in inputs: future = executor.submit(ProcTarget.proc2, i, i) fs.append(future) for future in futures.as_completed(fs): tmp = future.result() res.append(tmp) return res @timer def use_future_thread(inputs, num_proc): res = [] with futures.ThreadPoolExecutor(max_workers=num_proc) as executor: fs = [] for i in inputs: future = executor.submit(ProcTarget.proc2, i, i) fs.append(future) for future in futures.as_completed(fs): tmp = future.result() res.append(tmp) return res ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:5:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"Experiment def main(): inputs = list(range(100)) num_proc = 10 use_process_queue(inputs, num_proc) use_mp_pool_sync(inputs, num_proc) use_mp_pool_async(inputs, num_proc) use_future_process(inputs, num_proc) use_future_thread(inputs, num_proc) if __name__ == \"__main__\": main() ❯ python3 multi.py Child process #0 started Child process #1 started Child process #2 started Child process #3 started Child process #4 started Child process #5 started Child process #6 started Child process #7 started Child process #8 started Child process #9 started Child process #5 ending Child process #0 ending Child process #7 ending Child process #1 ending Child process #8 ending Child process #9 ending Child process #4 ending Child process #6 ending Child process #3 ending Child process #2 ending [use_process_queue] cost time: 0:01:20.191917 [use_process_queue] return len: 100 [use_mp_pool_sync] cost time: 0:01:00.059515 [use_mp_pool_sync] return len: 100 [use_mp_pool_async] cost time: 0:01:00.060099 [use_mp_pool_async] return len: 100 [use_future_process] cost time: 0:00:50.064544 [use_future_process] return len: 100 [use_future_thread] cost time: 0:00:50.050698 [use_future_thread] return len: 100 基本上，未來能用 concurrent.futures 我還是會優先使用 multiprocessing.Process 相對有彈性，但我不確定我是否有正確使用 ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:6:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"Ref https://docs.python.org/3/library/concurrent.futures.html https://docs.python.org/3/library/multiprocessing.html ","date":"2021-05-29","objectID":"/2021/05/python-multiprocessing/:7:0","tags":["Python"],"title":"Python - multiprocessing","uri":"/2021/05/python-multiprocessing/"},{"categories":["TechMemo"],"content":"Introduction 前陣子，要把別人的 SQL 程式用 Python 重現 發現，有一部份的資料算出來的結果都有些微的誤差，人工驗算後才發現是浮點數 (floating-point) 的問題 ","date":"2021-03-21","objectID":"/2021/03/python-decimal/:1:0","tags":["Python"],"title":"Python - decimal","uri":"/2021/03/python-decimal/"},{"categories":["TechMemo"],"content":"decimal 以下就是跟天真的我預想不一樣的例子 f = 3.15 round(f, 1) # 3.1 如果精度 (precision) 很重要，請使用內建的 decimal 這個模組 from decimal import Decimal from decimal import ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP # 沒錯，rounding 規則也有很多種，要自己挑選 # 我自己是使用 ROUND_HALF_EVEN f = 3.15 Decimal(f) # Decimal('3.149999999999999911182158029987476766109466552734375') Decimal(str(f)).quantize(Decimal('.0'), ROUND_HALF_EVEN) # 3.2 ","date":"2021-03-21","objectID":"/2021/03/python-decimal/:2:0","tags":["Python"],"title":"Python - decimal","uri":"/2021/03/python-decimal/"},{"categories":["TechMemo"],"content":"References https://kirin.idv.tw/python-decimal-module-tutorial/ https://docs.python.org/3/library/decimal.html ","date":"2021-03-21","objectID":"/2021/03/python-decimal/:3:0","tags":["Python"],"title":"Python - decimal","uri":"/2021/03/python-decimal/"},{"categories":["TechMemo"],"content":"Intro 上線環境常常連不到外網，更不用提去 Dockerhub 拉 image 來用。通常是在內網建個公司用的 registry server，一來是降低連線到外網的風險、二來是能檢驗公司內用的 image 是否合規。 這篇的目的在於，在本地建立個測試用的 registry server ，方便我自己測試 pull image 的過程是否有問題，畢竟公司的 registry server 也不是想測就測的。 然後，發現 docker doc 其實寫得很完整，所以節錄自己用到的部分，也記錄之後要去哪裡找資料。 ","date":"2020-08-05","objectID":"/2020/08/docker-local-registry/:1:0","tags":["Linux","docker"],"title":"Docker - Local Registry","uri":"/2020/08/docker-local-registry/"},{"categories":["TechMemo"],"content":"Deploy a local registry server docker run -d -p 5000:5000 --restart=always --name registry registry:2 ","date":"2020-08-05","objectID":"/2020/08/docker-local-registry/:2:0","tags":["Linux","docker"],"title":"Docker - Local Registry","uri":"/2020/08/docker-local-registry/"},{"categories":["TechMemo"],"content":"Copy an image from Docker Hub to your registry Pull the ubuntu:16.04 image from Docker Hub docker pull ubuntu:16.04 Tag the image as localhost:5000/my-ubuntu docker tag ubuntu:16.04 localhost:5000/my-ubuntu Push the image to the local registry running at localhost:5000 docker push localhost:5000/my-ubuntu Pull the localhost:5000/my-ubuntu image from your local registry docker pull localhost:5000/my-ubuntu ","date":"2020-08-05","objectID":"/2020/08/docker-local-registry/:3:0","tags":["Linux","docker"],"title":"Docker - Local Registry","uri":"/2020/08/docker-local-registry/"},{"categories":["TechMemo"],"content":"Stop a local registry docker container stop registry docker container stop registry \u0026\u0026 docker container rm -v registry ","date":"2020-08-05","objectID":"/2020/08/docker-local-registry/:4:0","tags":["Linux","docker"],"title":"Docker - Local Registry","uri":"/2020/08/docker-local-registry/"},{"categories":["TechMemo"],"content":"Reference https://docs.docker.com/registry/deploying/ ","date":"2020-08-05","objectID":"/2020/08/docker-local-registry/:5:0","tags":["Linux","docker"],"title":"Docker - Local Registry","uri":"/2020/08/docker-local-registry/"},{"categories":["TechMemo"],"content":"Introduction Python 有 argparse 可用，不曉得 Bash 是否有類似的模組能用? 結果是當然有 \"getopts\" 事實上，之前也用過一兩次。這次特別把它記錄下來 ","date":"2020-08-05","objectID":"/2020/08/bash-getopts/:1:0","tags":["Linux","Bash"],"title":"Bash - use getopts to parse arguments","uri":"/2020/08/bash-getopts/"},{"categories":["TechMemo"],"content":"getopts 基本上用法如下: getopts optstring optname [ arg ] 此篇僅記錄 short option ，若有 long-form (e.g. --path) 的需求，請參考 https://www.shellscript.sh/tips/getopt/ 個人覺得相對複雜些，如果要寫得這麼完整，我可能就用 Python 改寫 或之後有工作需要，我搞清楚了再來補齊這篇文章 ","date":"2020-08-05","objectID":"/2020/08/bash-getopts/:2:0","tags":["Linux","Bash"],"title":"Bash - use getopts to parse arguments","uri":"/2020/08/bash-getopts/"},{"categories":["TechMemo"],"content":"Example #!/usr/bin/bash a=0; b=0; c=0; d=0; while getopts \":ab:c:dh\" opt; do echo \"Process $opt: OPTIND is $OPTIND\" case ${opt} in a) a=1 ;; b) b=$OPTARG ;; c) c=$OPTARG ;; d) d=1 ;; h | ?) echo 'help message'; exit 0 ;; esac done echo \"a = $a\" echo \"b = $b\" echo \"c = $c\" echo \"d = $d\" 說明一下上述範例內容 有 5 個 options (a, b, c, d, h) 其中 b, c 必須提供 argument。因 optstring 中的 b, c 後方有加入 : (e.g. \"b:c:\") 其他 (a, d, h)，我的理解是類似 true/false 的概念 不認得的 option ，會被當作 ? 處理。範例中會顯示 help message 第 6 行 echo \"Process $opt : OPTIND is $OPTIND\" 的意思 單純提供額外資訊 $OPTIND，不需要可以移除該行 以下為執行結果: $ bash test.sh -a -b 5566 -d -c 56 Process a : OPTIND is 2 Process b : OPTIND is 4 Process d : OPTIND is 5 Process c : OPTIND is 7 a = 1 b = 5566 c = 56 d = 1 $ bash test.sh -b 5566 -d -c 56 Process b : OPTIND is 3 Process d : OPTIND is 4 Process c : OPTIND is 6 a = 0 b = 5566 c = 56 d = 1 $ bash test.sh -A Process ? : OPTIND is 2 help message ","date":"2020-08-05","objectID":"/2020/08/bash-getopts/:2:1","tags":["Linux","Bash"],"title":"Bash - use getopts to parse arguments","uri":"/2020/08/bash-getopts/"},{"categories":["TechMemo"],"content":"optstring 前是否有 : ? 這困擾我一陣子，網路上的範例有些有，有些無，搞不清楚最前面到底要不要加？ 後來看到有人解釋: 有 : 代表關閉 default error handling 無 : 代表啟用 default error handling # disable default error handling while getopts \":ab:c:dh\" opt; # enable default error handling while getopts \"ab:c:dh\" opt; 以下是有啟用 default error handling 的範例: $ bash test.sh -A test.sh: illegal option -- A Process ? : OPTIND is 2 help message 輸入不存在的 option -A，會顯示 test.sh: illegal option -- A 錯誤訊息 不需要這訊息的話，就可以選擇關閉 error handling ","date":"2020-08-05","objectID":"/2020/08/bash-getopts/:2:2","tags":["Linux","Bash"],"title":"Bash - use getopts to parse arguments","uri":"/2020/08/bash-getopts/"},{"categories":["TechMemo"],"content":"Reference https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options https://www.shellscript.sh/tips/getopts/ https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/ https://www.computerhope.com/unix/bash/getopts.htm ","date":"2020-08-05","objectID":"/2020/08/bash-getopts/:3:0","tags":["Linux","Bash"],"title":"Bash - use getopts to parse arguments","uri":"/2020/08/bash-getopts/"},{"categories":["TechMemo"],"content":"tar create tar.gz $ tar -zcvf tar-archive-name.tar.gz source-folder-name extract tar.gz $ tar -zxvf tar-archive-name.tar.gz create tar.gz (pigz) $ tar cv filename | pigz -6 -p 10 -k \u003e filename.tar.gz decompress $ tar -I pigz -xv filename.tar.gz ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:1:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"split $ split -b 200M linux-mint-18.tar.gz \"ISO-archive.part\" $ cat home.tar.bz2.parta* \u003e backup.tar.gz.joined ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:2:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"pcap check file type (pcap vs pcapng) $ capinfos -t [file] turn pcapng into pcap $ editcap -F pcap \u003cinput-pcapng-file\u003e \u003coutput-pcap-file\u003e change packet’s timestamp (reduce 1 hour; 60x60) $ editcap -t -3600 input_dump output_dump install bittwist (centos: build from src code) replace old ip (10.0.2.15) with new ip (1.144.118.53) $ bittwiste -I input_dump -O output_dump -T ip -s 10.0.2.15,1.144.118.53 -d 10.0.2.15,1.144.118.53 merge 2 pcap files (ctu20.pcap ctu29.pcap) $ mergecap -w \u003coutfile\u003e [\u003cinfile\u003e ...i] extract packets between a specific timeperiod $ editcap -v -A \"1970-01-01 08:00:00\" -B \"1970-01-01 11:00:00\" input_dump output_dump split pcap file based on specific time inverval (second) $ editcap -i \u003cseconds\u003e \u003cinput_file\u003e \u003coutput_prefix\u003e.pcapng scapy https://github.com/secdev/scapy IP address display filter $ tshark -r \u003cpcap_file\u003e -T fields -e ip.addr -Y \"ip.addr == 1.1.1.1/24\" ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:3:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"7zip $ 7za x ? ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:4:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"grep Search whether there are flows using port 514 grep '\", \\(514, [0-9]*\\|[0-9]*, 514\\)], \"byte\"' * find ./*/* -type f -exec grep -l '\", \\(514, [0-9]*\\|[0-9]*, 514\\)], \"byte\"' {} + -v :invert -E: use regex $ grep -v -E \"(xuite|hamicloud|googleapis|hinet)\" ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:5:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"awk split line by “\\t”; print all columns (1 to NF) $ cat [log] | awk -F \"\\t\" '{for(i=1;i\u003cNF;i++){printf \"%s\", $i} {printf \"\\n\"}}' similar to the previous one and use \",\" as separator OFS: output field separator ORS: output record separator; default \"\\n\" $ cat [log] | awk -F \"\\t\" 'BEGIN{OFS=\",\"} {printf \"%s |\", $6; for(i=10;i\u003c=17;i++){printf \"%s,\", $i}; printf \"\\n\"}'|sort|uniq print all columns except i==2 and i==3 $ cat [log] | awk -F \"\\t\" '{for(i=1;i\u003c=NF;i++){if(i!=2 \u0026\u0026 i!=3){printf \"%s\", $i}} {printf \"\\n\"}}' print line if column 4 or column 6 match the pattern $ cat [log] | awk -F \"\\t\" \"{if (\\$4 ~ /$pattern/ || \\$6 ~ /$pattern/) print}\" ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:6:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"tail print [file] starting from 3rd line $ tail -n+3 [file] ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:7:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"sed print [file] except line 2 ~ line 5 $ sed -n '2,5d;p' [file] ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:8:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"vim format(Indent) the whole file gg: from first line; G: to last line; =: Indent gg=G format(Indent) line 100 to line 200 100G=200G ","date":"2020-07-28","objectID":"/2020/07/my-command-line-cheat-sheet/:9:0","tags":["Linux"],"title":"My Command Line Cheat Sheet","uri":"/2020/07/my-command-line-cheat-sheet/"},{"categories":["TechMemo"],"content":"Purpose 前陣子，在把專案製作成 docker image 的過程，想到幾個問題 : 製作出的 image 理所當然要包含專案系統的功能。但是有需要包含 testing 的部分嗎 ? 不需要包含 testing 程式碼的話，要怎樣才能控制 docker build 的流程 ? 先不論程式碼，有辦法維護一個 Dockerfile 就同時符合 testing/production/… 多個需求嗎? 搜尋相關資訊後，看起來解法就是 “docker multi-stage builds” (Docker 17.05 later) 以往同樣的程式要製作成不同用途 image (for testing, for production)，通常需要多個 Dockerfiles，透過 multi-stage builds 可以做到 : 控制建構流程，達到一個 Dockerfile 可產生不同目的的 image ←我的主要需求 可以只複製某個 stage 的中間結果 → 不需要該 stage 的環境 → 節省 image 大小 ","date":"2020-07-18","objectID":"/2020/07/examples-of-docker-multi-stage-builds/:1:0","tags":["docker"],"title":"Examples of Docker Multi-stage Builds","uri":"/2020/07/examples-of-docker-multi-stage-builds/"},{"categories":["TechMemo"],"content":"Examples 以下 2 個範例，內容差不多 ","date":"2020-07-18","objectID":"/2020/07/examples-of-docker-multi-stage-builds/:2:0","tags":["docker"],"title":"Examples of Docker Multi-stage Builds","uri":"/2020/07/examples-of-docker-multi-stage-builds/"},{"categories":["TechMemo"],"content":"Example 1 FROMalpine:3.12 AS baseWORKDIR/root/RUN touch fileInitFROMbase AS testingRUN touch fileTestingFROMbase AS productionRUN touch fileProduct 以上面這個 Dockerfile 而言，有 3 個 stages stage 0 FROMalpine:3.12 AS baseWORKDIR/root/RUN touch fileInit FROM [image] AS [name] FROM 搭配 AS 可以命名該 stage 這裡把 alpine:3.12 命名為 base 建立一個 fileInit 檔案 stage 1 FROMbase AS testingRUN touch fileTesting 把 base 當作 parent image，並將此 stage 命名為 testing 建立一個 fileTesting 檔案 stage 2 FROMbase AS productionRUN touch fileProduct 把 base 當作 parent image，並將此 stage 命名為 production 建立一個 fileProduct 檔案 因為是把 base 當作 parent image，代表流程是 base → production，中間不包含 testing，代表製作的 image 不包含 testing 的資訊。 → “fileTesting 不存在” Build image - EX1 # Production docker build -t multi1 --target production -f Dockerfile . docker build -t multi1 -f Dockerfile . # Test docker build -t multi1 --target testing -f Dockerfile . 透過 --target 指定流程走到哪個 stage 結束 若 --target production，代表從頭 (base) 走到尾 (production) 詳細去看 log 的話，testing 也會被執行，只是以 Example 1 而言， image 不會包含 testing 的資訊 若 --target testing，代表從 base 到 testing 把 touch file 改成自己需要的指令 (python main.py | python -m pytest | … )，就能完成一個多目的的 Dockerfile : 確保各用途的 image 都有一樣的環境 stage testing 才把測試用的程式碼與測試資料放到 image 中，產生 production image 時，就不會包含測試的資料與程式碼 ","date":"2020-07-18","objectID":"/2020/07/examples-of-docker-multi-stage-builds/:2:1","tags":["docker"],"title":"Examples of Docker Multi-stage Builds","uri":"/2020/07/examples-of-docker-multi-stage-builds/"},{"categories":["TechMemo"],"content":"Example 2 Example 1 透過 --target 控制流程，Example 2 則是透過 --build-arg 來達到目的。 個人認為 Example 2 較有彈性。專案可能越來越複雜，testing image跟 production image 不見得在最後才有差異。這種情況下，--target 不見得夠用 ARG BUILD_TYPE='production'FROMalpine:3.12 AS baseWORKDIR/root/RUN touch fileInitFROMgolang:1.14.6 AS go-buildWORKDIR/goCOPY hello.go .RUN go build -o hello .FROMbase AS testingRUN touch fileTestingFROMbase AS productionRUN touch fileProductFROM${BUILD_TYPE} as afterFROMafterRUN touch fileFinalCOPY --from=go-build /go/hello .CMD [ \"./hello\" ] --build-arg 先不考慮 stage go-build 以及 COPY 指令的話 就如前面所說，是透過 --build-arg (BUILD_TYPE) 來控制建構流程，順序如下 base testing | production # 根據 BUILD_TYPE after COPY (stage 1 \u0026 stage 5) FROMgolang:1.14.6 AS go-buildWORKDIR/goCOPY hello.go .RUN go build -o hello .FROMafterRUN touch fileFinalCOPY --from=go-build /go/hello .CMD [ \"./hello\" ] COPY --from=[stage name] ... 從指定的 stage A 複製特定檔案到該 stage B (line: 8) 複製 stage go-build 產生的可執行檔 hello 到 stage after 中 stage after 需要執行 hello，因此對使用者而言，stage go-build 唯一需要保留的就是hello。透過 multi-stage build，最終產生的 image 不會包含 stage go-build 的 go 環境 減少 image 大小 Build image - EX2 # Production docker build -t multi2 --build-arg BUILD_TYPE=production -f Dockerfile . docker build -t multi2 -f Dockerfile . # Test docker build -t multi2 --build-arg BUILD_TYPE=testing -f Dockerfile . 類似 Build image - EX1，只是改由 --build-arg 來指定流程 ","date":"2020-07-18","objectID":"/2020/07/examples-of-docker-multi-stage-builds/:2:2","tags":["docker"],"title":"Examples of Docker Multi-stage Builds","uri":"/2020/07/examples-of-docker-multi-stage-builds/"},{"categories":["TechMemo"],"content":"Conclusion 基本上，知道下面兩個指令的作用 FROM [image] AS [name] COPY --from=[stage name] ... 搭配 docker build 的兩個參數 --target --build-arg 就能看懂用 multi-stage 的 Dockerfile， 剩下就是從簡單的範例改出自己需要的 Dockerfile ~ ","date":"2020-07-18","objectID":"/2020/07/examples-of-docker-multi-stage-builds/:3:0","tags":["docker"],"title":"Examples of Docker Multi-stage Builds","uri":"/2020/07/examples-of-docker-multi-stage-builds/"},{"categories":["TechMemo"],"content":"Reference https://docs.docker.com/develop/develop-images/multistage-build/ https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/ https://kkc.github.io/2018/04/28/docker-note/ https://jiepeng.me/2018/06/09/use-docker-multiple-stage-builds https://tachingchen.com/tw/blog/docker-multi-stage-builds/ ","date":"2020-07-18","objectID":"/2020/07/examples-of-docker-multi-stage-builds/:4:0","tags":["docker"],"title":"Examples of Docker Multi-stage Builds","uri":"/2020/07/examples-of-docker-multi-stage-builds/"},{"categories":["TechMemo"],"content":"Run $ docker run -it --rm -v $(pwd):/app:rw [image-name] [COMMAND] [ARG...] -i : Keep STDIN open even if not attached -t : Allocate a pseudo-tty -v : Bind mount a volume. --volume=[host-src:]container-dest[:\u003coptions\u003e] --rm : automatically clean up the container and remove the file system when the container exits ref: Docker run reference ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:1:0","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Start start the stopped container $ docker start [container-name] ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:2:0","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Save and Load image # save as .tar $ docker save [image-name] \u003e [image-name.tar] # load $ docker load \u003c [image-name.tar] ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:3:0","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Image (List / Del) # list $ docker images or $ docker image ls # delete $ docker image rm [image-name] ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:4:0","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Container ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:5:0","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"List # list all running containers $ docker container ls $ docker ps # list all containers including exited $ docker container ls -a $ docker ps -a # list all running containers with Container ID $ docker ps -q ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:5:1","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Stop # stop a running container $ docker stop [container-name] $ docker stop [container-id] # stop all running container $ docker stop $(docker ps -q) ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:5:2","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Remove # remove stopped container $ docker container rm [container-name] # remove all stopped containers $ docker container rm $(docker ps -a -q) ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:5:3","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"Commit commit to image “src image” → “changed container” → “new image” $ docker commit [container-id] [image-name] ref: Difference between save and export in Docker ","date":"2020-07-15","objectID":"/2020/07/docker-commands/:6:0","tags":["docker"],"title":"Docker commands","uri":"/2020/07/docker-commands/"},{"categories":["TechMemo"],"content":"前言 先前的經驗告訴我，建個 GPU 訓練環境是很麻煩的事 最近想學習一下 Computer Vision，是時候再來弄個環境 原先在猜，如果用 container 的方式來做說不定會比較簡單，也容易搬到別的地方部屬 結果，還是有不少眉眉角角的地方要注意 目前看來，應該有比較好 deploy 吧？ ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:1:0","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Pre-installation 簡單說明安裝前的環境 Ubuntu 18.04 LTS Docker version 19.03.11 GPU (1070ti) 接下來，文章中會用 Host 代表所謂的 Localhost (本機)， Guest 代表 Container 我不確定這用法是否合適，若有更好的說法，請再指教 :) 可以看到，Host 還沒有裝 nvidia-driver 跟 CUDA 實際上，Host 不用刻意去裝 CUDA。之後直接 pull 別人處理好的 image 就行。 除非，你想在 Host 也有個可以使用 GPU training 的環境。 Docker的部份請參考 https://docs.docker.com/engine/install/ubuntu/ 除非像敝司的網路環境，什麼都要設定 Proxy，不然這官網這一頁就很夠了 ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:2:0","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Installation ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:3:0","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Nvidia Driver 先檢查是否有 ubuntu-drivers-common 這個工具 (我的環境是已安裝) 沒有的話，請先安裝 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt update sudo apt install ubuntu-drivers-common 用 ubuntu-drivers-common 檢查 Driver 狀態 ubuntu-drivers devices == /sys/devices/pci0000:00/0000:00:03.1/0000:1c:00.0 == modalias : pci:v000010DEd00001B82sv000019DAsd00002445bc03sc00i00 vendor : NVIDIA Corporation model : GP104 [GeForce GTX 1070 Ti] driver : nvidia-driver-415 - third-party free driver : nvidia-driver-418 - third-party free driver : nvidia-driver-390 - distro non-free driver : nvidia-driver-440 - third-party free recommended driver : nvidia-driver-435 - distro non-free driver : nvidia-driver-410 - third-party free driver : xserver-xorg-video-nouveau - distro free builtin 實際上，以現在時間(2020-06-12)最新的版本是 `nvidia-driver-450` 但是根據清單，我選擇清單中出現的 `nvidia-driver-440` 裝完後，重新開機 sudo reboot ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:3:1","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Nvidia Container Runtime 接著安裝 nvidia-container-runtime sudo apt install nvidia-container-runtime ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:3:2","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Build Docker Image 以下是我的 Dockerfile (也可以 pull 後再修改) FROM tensorflow/tensorflow:latest-gpu-py3 ENV LC_ALL C.UTF-8 ENV LANG C.UTF-8 ENV LANGUAGE C.UTF-8 RUN apt-get update \u0026\u0026 apt-get install -y libsm6 libxext6 libxrender-dev RUN useradd --create-home --shell /bin/bash user WORKDIR /home/user RUN python3 -m pip install -U pip setuptools RUN python3 -m pip install jupyterlab gluoncv opencv-python pandas numpy ensemble-boxes RUN python3 -m pip install mxnet-cu101 注意 base image (tensorflow/tensorflow:latest-gpu-py3) 中的 CUDA 版本 檢查 (tensorflow, CUDA) \u0026 (mxnet, CUDA) 版本對應是否正確 原則上，從 tensorflow 抓的 image， tensorflow 跟 CUDA 的版本是沒有問題的 但我還想使用 mxnet， 所以要去確認 image 的 CUDA 版本 run container，到 /usr/local 確認 CUDA 版本 我這裡是 cuda-10-1，所以安裝 mxnet-cu101 p.s. 不曉得為什麼，在 container 用 nvidia-smi 測試，顯示是 10.2 在 Dockerfile 同一個資料夾下 build image docker build -t \u003cIMAGE NAME\u003e . ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:3:3","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Verification 借 tensorflow 跟 mxnet 官方文件的指令來測試，GPU環境是否一切安好 tensorflow docker run --gpus all -it --rm \u003cIMAGE NAME\u003e \\ python -c \"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\" mxnet Launch the container docker run --gpus all -it --rm \u003cIMAGE NAME\u003e bash * Start the python terminal and test it python \u003e\u003e\u003e import mxnet as mx \u003e\u003e\u003e a = mx.nd.ones((2, 3)) \u003e\u003e\u003e b = a * 2 + 1 \u003e\u003e\u003e b.asnumpy() array([[ 3., 3., 3.], [ 3., 3., 3.]], dtype=float32) 沒有 error，就沒事啦 ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:3:4","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"Launch with jupyter lab enjoy docker run --gpus all -p 8888:8888 -u user:user -v $(pwd):/home/user \u003cIMAGE NAME\u003e \\ jupyter lab --ip=0.0.0.0 --port=8888 --notebook-dir=/home/user ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:3:5","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":["TechMemo"],"content":"References https://www.celantur.com/blog/run-cuda-in-docker-on-linux/ https://www.tensorflow.org/install/docker#examples_using_gpu-enabled_images https://gitpress.io/@chchang/install-nvidia-driver-cuda-pgstrom-in-ubuntu-1804 ","date":"2020-06-12","objectID":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/:4:0","tags":["docker","tensorflow","mxnet","GPU","CUDA"],"title":"Environment Setup (Docker + Tensorflow + Mxnet + GPU)","uri":"/2020/06/docker-x-tensorflow-x-mxnet-x-gpu/"},{"categories":null,"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ","date":"0001-01-01","objectID":"/1/01/hello-world/:0:0","tags":null,"title":"Hello World","uri":"/1/01/hello-world/"},{"categories":null,"content":"Quick Start ","date":"0001-01-01","objectID":"/1/01/hello-world/:1:0","tags":null,"title":"Hello World","uri":"/1/01/hello-world/"},{"categories":null,"content":"Create a new post $ hexo new \"My New Post\" More info: Writing ","date":"0001-01-01","objectID":"/1/01/hello-world/:1:1","tags":null,"title":"Hello World","uri":"/1/01/hello-world/"},{"categories":null,"content":"Run server $ hexo server More info: Server ","date":"0001-01-01","objectID":"/1/01/hello-world/:1:2","tags":null,"title":"Hello World","uri":"/1/01/hello-world/"},{"categories":null,"content":"Generate static files $ hexo generate More info: Generating ","date":"0001-01-01","objectID":"/1/01/hello-world/:1:3","tags":null,"title":"Hello World","uri":"/1/01/hello-world/"},{"categories":null,"content":"Deploy to remote sites $ hexo deploy More info: Deployment ","date":"0001-01-01","objectID":"/1/01/hello-world/:1:4","tags":null,"title":"Hello World","uri":"/1/01/hello-world/"}]